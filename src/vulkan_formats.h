#pragma once
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>
#include <stdint.h>


//! Enumeration of all possible format compatibility classes
typedef enum {
	FORMAT_CLASS_8_BIT,
	FORMAT_CLASS_16_BIT,
	FORMAT_CLASS_8_BIT_ALPHA,
	FORMAT_CLASS_24_BIT,
	FORMAT_CLASS_32_BIT,
	FORMAT_CLASS_48_BIT,
	FORMAT_CLASS_64_BIT,
	FORMAT_CLASS_96_BIT,
	FORMAT_CLASS_128_BIT,
	FORMAT_CLASS_192_BIT,
	FORMAT_CLASS_256_BIT,
	FORMAT_CLASS_D16,
	FORMAT_CLASS_D24,
	FORMAT_CLASS_D32,
	FORMAT_CLASS_S8,
	FORMAT_CLASS_D16S8,
	FORMAT_CLASS_D24S8,
	FORMAT_CLASS_D32S8,
	FORMAT_CLASS_BC1_RGB,
	FORMAT_CLASS_BC1_RGBA,
	FORMAT_CLASS_BC2,
	FORMAT_CLASS_BC3,
	FORMAT_CLASS_BC4,
	FORMAT_CLASS_BC5,
	FORMAT_CLASS_BC6H,
	FORMAT_CLASS_BC7,
	FORMAT_CLASS_ETC2_RGB,
	FORMAT_CLASS_ETC2_RGBA,
	FORMAT_CLASS_ETC2_EAC_RGBA,
	FORMAT_CLASS_EAC_R,
	FORMAT_CLASS_EAC_RG,
	FORMAT_CLASS_ASTC_4X4,
	FORMAT_CLASS_ASTC_5X4,
	FORMAT_CLASS_ASTC_5X5,
	FORMAT_CLASS_ASTC_6X5,
	FORMAT_CLASS_ASTC_6X6,
	FORMAT_CLASS_ASTC_8X5,
	FORMAT_CLASS_ASTC_8X6,
	FORMAT_CLASS_ASTC_8X8,
	FORMAT_CLASS_ASTC_10X5,
	FORMAT_CLASS_ASTC_10X6,
	FORMAT_CLASS_ASTC_10X8,
	FORMAT_CLASS_ASTC_10X10,
	FORMAT_CLASS_ASTC_12X10,
	FORMAT_CLASS_ASTC_12X12,
	FORMAT_CLASS_32_BIT_G8B8G8R8,
	FORMAT_CLASS_32_BIT_B8G8R8G8,
	FORMAT_CLASS_8_BIT_3_PLANE_420,
	FORMAT_CLASS_8_BIT_2_PLANE_420,
	FORMAT_CLASS_8_BIT_3_PLANE_422,
	FORMAT_CLASS_8_BIT_2_PLANE_422,
	FORMAT_CLASS_8_BIT_3_PLANE_444,
	FORMAT_CLASS_64_BIT_R10G10B10A10,
	FORMAT_CLASS_64_BIT_G10B10G10R10,
	FORMAT_CLASS_64_BIT_B10G10R10G10,
	FORMAT_CLASS_10_BIT_3_PLANE_420,
	FORMAT_CLASS_10_BIT_2_PLANE_420,
	FORMAT_CLASS_10_BIT_3_PLANE_422,
	FORMAT_CLASS_10_BIT_2_PLANE_422,
	FORMAT_CLASS_10_BIT_3_PLANE_444,
	FORMAT_CLASS_64_BIT_R12G12B12A12,
	FORMAT_CLASS_64_BIT_G12B12G12R12,
	FORMAT_CLASS_64_BIT_B12G12R12G12,
	FORMAT_CLASS_12_BIT_3_PLANE_420,
	FORMAT_CLASS_12_BIT_2_PLANE_420,
	FORMAT_CLASS_12_BIT_3_PLANE_422,
	FORMAT_CLASS_12_BIT_2_PLANE_422,
	FORMAT_CLASS_12_BIT_3_PLANE_444,
	FORMAT_CLASS_64_BIT_G16B16G16R16,
	FORMAT_CLASS_64_BIT_B16G16R16G16,
	FORMAT_CLASS_16_BIT_3_PLANE_420,
	FORMAT_CLASS_16_BIT_2_PLANE_420,
	FORMAT_CLASS_16_BIT_3_PLANE_422,
	FORMAT_CLASS_16_BIT_2_PLANE_422,
	FORMAT_CLASS_16_BIT_3_PLANE_444,
	FORMAT_CLASS_PVRTC1_2BPP,
	FORMAT_CLASS_PVRTC1_4BPP,
	FORMAT_CLASS_PVRTC2_2BPP,
	FORMAT_CLASS_PVRTC2_4BPP,
	FORMAT_CLASS_8_BIT_2_PLANE_444,
	FORMAT_CLASS_10_BIT_2_PLANE_444,
	FORMAT_CLASS_12_BIT_2_PLANE_444,
	FORMAT_CLASS_16_BIT_2_PLANE_444,
} format_class_t;


//! Provides meta data about a Vulkan format that can for example be used to
//! figure out how to copy data from a buffer to an image. Autogenerated from
//! vk.xml by ../tools/vulkan_formats.py.
typedef struct {
	//! The format compatibility class of the format. Copying between two
	//! formats of the same class is permitted.
	format_class_t cls;
	//! The number of bytes per texel block
	VkDeviceSize block_size;
	//! The number of texels per texel block
	uint32_t texels_per_block;
	//! For packed formats such as VK_FORMAT_R5G6B5_UNORM_PACK16, this is the
	//! number of bits into which a color is being packed. 0 otherwise.
	uint32_t packed_bits;
} format_description_t;


//! Provides meta data about the given Vulkan format.
//! \see format_description_t
format_description_t get_format_description(VkFormat format);
